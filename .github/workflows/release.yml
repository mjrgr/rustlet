name: Release Rustlet

permissions:
  contents: write

on:
  push:
    tags:
      - 'v*'

env:
  GH_PROJECT_NAME: rustlet

jobs:
  build:
    uses: ./.github/workflows/build.yml
    secrets: inherit
  release:
    needs:
      - build
    name: release-${{ matrix.type }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            type: linux
          - os: macos-latest
            type: darwin
          - os: windows-latest
            type: windows

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Build release binary
        run: cargo build --release

      - name: Archive binary
        shell: bash
        run: |
          mkdir artifacts
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            mv target/release/$GH_PROJECT_NAME.exe artifacts/$GH_PROJECT_NAME-${{ matrix.type }}.exe
          else
            mv target/release/$GH_PROJECT_NAME artifacts/$GH_PROJECT_NAME-${{ matrix.type }}
          fi
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-binaries
          path: artifacts/*

  github-release:
    needs: release
    name: gh-release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Collect commit messages
        id: commits
        run: |
          COMMITMESSAGES="$(git log --pretty=format:'âœ¨ %s')"
          echo "COMMITS=$COMMITMESSAGES" >> $GITHUB_ENV

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: Release ${{ github.ref_name }}
          body: |
            # Rustlet ðŸ¦€
            
            ## ðŸš€ What's new in ${{ github.ref_name }}
            ${{ env.COMMITS }}
            
            ## ðŸ“¦ Get OCI image
            
            To pull generated image:
            
            ```bash
            podman pull ${{ vars.CR_REGISTRY }}/${{ env.GH_PROJECT_NAME }}:${{ github.ref_name }}
            docker pull ${{ vars.CR_REGISTRY }}/${{ env.GH_PROJECT_NAME }}:${{ github.ref_name }}
            ```
          files: release-artifacts/**/*
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}