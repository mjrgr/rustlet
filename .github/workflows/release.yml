name: Release Rustlet

permissions:
  contents: write

on:
  push:
    tags:
      - 'v*'

env:
  GH_PROJECT_NAME: rustlet
  CARGO_TERM_COLOR: always

jobs:
  build:
    uses: ./.github/workflows/build.yml
    secrets: inherit

  release:
    needs:
      - build
    name: release-${{ matrix.type }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            type: linux
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            type: linux-musl
          - os: macos-latest
            target: x86_64-apple-darwin
            type: darwin-amd64
          - os: macos-latest
            target: aarch64-apple-darwin
            type: darwin-arm64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            type: windows
            ext: .exe


    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation dependencies
        if: matrix.target == 'x86_64-unknown-linux-musl'
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools

      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Archive binary
        shell: bash
        run: |
          mkdir -p artifacts
          binary_name="${GH_PROJECT_NAME}${{ matrix.ext }}"
          artifact_name="${GH_PROJECT_NAME}-${{ matrix.type }}${{ matrix.ext }}"
          
          if [ -f "target/${{ matrix.target }}/release/$binary_name" ]; then
            cp "target/${{ matrix.target }}/release/$binary_name" "artifacts/$artifact_name"
            # Calculer et stocker les checksums
            cd artifacts
            sha256sum "$artifact_name" > "$artifact_name.sha256"
          else
            echo "Binary not found at expected location"
            exit 1
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.type }}-binaries
          path: artifacts/*
          if-no-files-found: error


  github-release:
    needs: release
    name: gh-release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Collect commit messages since last tag
        id: commits
        run: |
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -n "$LAST_TAG" ]; then
            COMMITS=$(git log --pretty=format:'‚òëÔ∏è %s' ${LAST_TAG}..HEAD)
          else
            COMMITS=$(git log --pretty=format:'‚òëÔ∏è %s')
          fi
          echo "COMMITS<<EOF" >> $GITHUB_ENV
          echo "$COMMITS" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: Release ${{ github.ref_name }}
          body: |
            # Rustlet ü¶Ä
            
            ## üöÄ What's new in ${{ github.ref_name }}
            ${{ env.COMMITS }}
            
            ## üì¶ Installation
            
            ### üìÑBinaires

            Download the binary corresponding to your platform from the assets below.
            The `.sha256` files contain checksums to verify the integrity of the binaries.
            
            ```bash
            sha256sum -c rustlet-[arch].sha256
            ```            
            
            ### üê≥ Get OCI image
            
            To pull generated image:
            
            ```bash
            # Podman
            podman pull ${{ vars.CR_REGISTRY }}/${{ env.GH_PROJECT_NAME }}:${{ github.ref_name }}
            
            # Docker
            docker pull ${{ vars.CR_REGISTRY }}/${{ env.GH_PROJECT_NAME }}:${{ github.ref_name }}
            ```

          files: release-artifacts/**/*
          generate_release_notes: true
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}