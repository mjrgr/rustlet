name: Build Rustlet

permissions:
  contents: read
  security-events: write
  actions: read

on:
  workflow_call:
    outputs:
      image-digest:
        description: "Container image digest"
        value: ${{ jobs.build.outputs.image-digest }}
      image-tag:
        description: "Container image name"
        value: ${{ jobs.build.outputs.image-name }}
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'

env:
  GH_PROJECT_NAME: rustlet
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test and Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run Clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Run tests
        run: cargo test --verbose

      - name: Check for security vulnerabilities
        run: |
          cargo install cargo-audit
          cargo audit

  build:
    name: Build and Push
    runs-on: ubuntu-latest
    needs: test
    outputs:
      image-digest: ${{ steps.build-image.outputs.digest }}
      image-name: ${{ steps.build-image.outputs.name }}

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Install Podman
        run: |
          sudo apt-get update
          sudo apt-get -y install podman

      - name: Set image tag
        id: imagetag
        run: |
          if [ "${GITHUB_REF}" == "refs/heads/main" ]; then
            IMAGE_TAG=latest
          elif [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            TAG_NAME=${GITHUB_REF#refs/tags/}
            IMAGE_TAG=${TAG_NAME}
          else
            SHORT_SHA=$(echo ${GITHUB_SHA} | cut -c1-7)
            IMAGE_TAG=${SHORT_SHA}
          fi          
          IMAGE_NAME=$GH_PROJECT_NAME:$IMAGE_TAG
          IMAGE=${{ vars.CR_REGISTRY }}/$IMAGE_NAME
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          echo "IMAGE_NAME=${IMAGE_NAME}" >> $GITHUB_ENV
          echo "IMAGE=${IMAGE}" >> $GITHUB_ENV

      - name: Build image
        id: build-image
        run: |
          podman build -t $IMAGE .
          podman save > podman-image.tar $IMAGE
          DIGEST=$(podman inspect --format='{{.Digest}}' $IMAGE)
          echo "digest=${DIGEST}" >> $GITHUB_OUTPUT
          echo "name=${IMAGE_NAME}" >> $GITHUB_OUTPUT

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.33.1
        with:
          format: sarif
          output: trivy-results.sarif
          input: 'podman-image.tar'
          version: latest

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          category: 'trivy-container-scan'
          sarif_file: 'trivy-results.sarif'

      - name: Push image
        if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
        run: |
          echo "${{ secrets.CR_PASSWORD }}" | podman login -u "${{ secrets.CR_USERNAME }}" --password-stdin ${{ vars.CR_REGISTRY }}
          podman push $IMAGE